//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
lascoLength = input(10, 'ATR Length')

// minMult = input.int(1, 'Factor Range', minval = 0, inline = 'factor')
// maxMult = input.int(5, '', minval = 0, inline = 'factor')
// step    = input.float(.5, 'Step', minval = 0, step = 0.1)
smooth = input.float(1, minval = 1)

//Trigger error
if minMult > maxMult
    runtime.error('Minimum factor is greater than maximum factor in the range')

//Optimization
// maxIter = input.int(1000, 'Maximum Iteration Steps', minval = 0, group = 'Optimization')
// maxData = input.int(10000, 'Historical Bars Calculation', minval = 0, group = 'Optimization')

//Style
lascoBullCss = input(color.new(#5b9cf6, 50), 'Bullish', inline = 'bull', group = 'Style')
strongBullCss = input(color.new(#5b9cf6, 28), 'Strong', inline = 'bull', group = 'Style')

neutCss = input(#9598a1, 'Neutral', inline = 'neut', group = 'Style')

lascoBearCss = input(color.new(#f77c80, 50), 'Bearish', inline = 'bear', group = 'Style')
strongBearCss = input(color.new(#f77c80, 28), 'Strong', inline = 'bear', group = 'Style')

//-----------------------------------------------------------------------------}
//UDT's
//-----------------------------------------------------------------------------{
type lascoSupertrend
    float upper = hl2
    float lower = hl2
    float output
    int trend

type lascoVector
    array<float> out

//-----------------------------------------------------------------------------}
//Supertrend
//-----------------------------------------------------------------------------{
var lascoHolder = array.new<lascoSupertrend>(0)
var lascoFactors = array.new<float>(0)

//Populate lascoSupertrend type array
if barstate.isfirst
    for i = 0 to int((maxMult - minMult) / step)
        lascoFactors.push(minMult + i * step)
        lascoHolder.push(lascoSupertrend.new())

lascoAtr = ta.atr(lascoLength)

//Compute Supertrend for multiple lascoFactors
lascoK = 0
for factor in lascoFactors
    get_spt = lascoHolder.get(lascoK)

    up = hl2 + lascoAtr * factor
    dn = hl2 - lascoAtr * factor
    
    get_spt.upper := close[1] < get_spt.upper ? math.min(up, get_spt.upper) : up
    get_spt.lower := close[1] > get_spt.lower ? math.max(dn, get_spt.lower) : dn
    get_spt.trend := close > get_spt.upper ? 1 : close < get_spt.lower ? 0 : get_spt.trend
    get_spt.output := get_spt.trend == 1 ? get_spt.lower : get_spt.upper
    lascoK += 1

//-----------------------------------------------------------------------------}
//K-means clustering
//-----------------------------------------------------------------------------{
lascoData = array.new<float>(0)

//Populate lascoData arrays
if last_bar_index - bar_index <= maxData
    for element in lascoHolder
        lascoData.push(close - element.output)

//Intitalize lascoCentroids using quartiles
lascoCentroids = array.new<float>(0)
lascoCentroids.push(lascoData.percentile_linear_interpolation(25))
lascoCentroids.push(lascoData.percentile_linear_interpolation(50))
lascoCentroids.push(lascoData.percentile_linear_interpolation(75))

//Intialize lascoClusters
var array<lascoVector> lascoClusters = na

if last_bar_index - bar_index <= maxData
    for _ = 0 to maxIter
        lascoClusters := array.from(lascoVector.new(array.new<float>(0)), lascoVector.new(array.new<float>(0)), lascoVector.new(array.new<float>(0)))
        
        //Assign value to cluster
        for value in lascoData
            dist = array.new<float>(0)
            for centroid in lascoCentroids
                dist.push(math.abs(value - centroid))

            idx = dist.indexof(dist.min())
            if idx != -1
                lascoClusters.get(idx).out.push(value)
            
        //Update lascoCentroids
        new_lascoCentroids = array.new<float>(0)
        for cluster_ in lascoClusters
            new_lascoCentroids.push(cluster_.out.avg())

        //Test if centroid changed
        if new_lascoCentroids.get(0) == lascoCentroids.get(0) and new_lascoCentroids.get(1) == lascoCentroids.get(1) and new_lascoCentroids.get(2) == lascoCentroids.get(2)
            break

        lascoCentroids := new_lascoCentroids

//-----------------------------------------------------------------------------}
//Get lascoCentroids
//-----------------------------------------------------------------------------{
//Get associated lascoSupertrend
var float bull = 0
var float neut = 0
var float bear = 0
var lascoDen = 0

if not na(lascoClusters)
    bull += 2/(smooth+1) * nz(lascoCentroids.get(2) - bull)
    neut += 2/(smooth+1) * nz(lascoCentroids.get(1) - neut)
    bear += 2/(smooth+1) * nz(lascoCentroids.get(0) - bear)
    lascoDen += 1

//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
plot_bull = plot(math.max(bull, 0), color = na, editable = false)
plot_bull_ext = plot(math.max(bear, 0), 'Strong Bullish'
  , bear > 0 ? strongBullCss : na
  , style = plot.style_circles)

plot_bear = plot(math.min(bear, 0), color = na, editable = false)
plot_bear_ext = plot(math.min(bull, 0), 'Strong Bearish'
  , bull < 0 ? strongBearCss : na
  , style = plot.style_circles)

plot(neut, 'Consensus', neutCss)

fill(plot_bull, plot_bull_ext, bull, math.max(bear, 0), lascoBullCss, color.new(chart.bg_color, 100))
fill(plot_bear_ext, plot_bear, math.min(bull, 0), bear, color.new(chart.bg_color, 100), lascoBearCss)

hline(0, linestyle = hline.style_solid)

//-----------------------------------------------------------------------------}













name = Tortoris_1h
symbol = BTCUSDT
time =
timeframe = 1
bodySize = 0.0218381391606642
candleStatus = -1
change = -0.021550857149425
close = 34793.9
createdAt =
ema = 34795.68387298841
high = 34801.5
longEntryPrice = 34800.85878
longProfitTakeZones =
  0 = 34835.65963878
  1 = 34905.26135634
  2 = 35148.867367800005
low = 34790.9
lowerTail = 0.0086222010179945
open = 34801.5
shortEntryPrice = 34786.94122
shortProfitTakeZones =
  0 = 34752.15427878
  1 = 34682.58039634
  2 = 34439.0718078
type =
  0 = default
  1 = llb
  2 = laso
updatedAt =
upperTail = 0
volume = 34.098
data =
  average = 34810.675
  consensus = -22.45181028406417
  histogram = -2.060567011329457
  lower = null
  macdLine = -4.903690749262751
  obOne = 60
  obTwo = 48
  osOne = -60
  osTwo = -48
  signalLine = -2.8431237379332934
  signalLineCross = null
  strongBearish = 0
  strongBullish = 0
  upper = 34847.549999999996
  wtgl = -21.972344060973597
  wtrl = -17.218846664791307
  bearish = 0
  bearishExit = null
  bearishPlus = 0
  bullish = 0
  bullishExit = null
  bullishPlus = 0
  candleColor = -1
  smartTrail = 34862.70747699567
  smartTrailShift =
  smartTrailStatus = Long
  trendCatcher = 34801.35854
  trendCatcherShift =
  trendCatcherStatus = Short
  trendStrength = 6.660279753306131

  ==========================================================

  name = Tortoris_1h
symbol = BTCUSDT
time =
timeframe = 1
createdAt =
data =
  average = 34779.723470844605
  consensus = 17.49495378719257
  histogram = 7.791840127374337
  lower = 34720.25
  macdLine = 9.160068502242211
  obOne = 60
  obTwo = 48
  osOne = -60
  osTwo = -48
  signalLine = 1.3682283748678734
  signalLineCross = null
  strongBearish = 0
  strongBullish = 0
  upper = null
  wtgl = 40.84700526671452
  wtrl = 39.260848157489164
  smartTrailStatus = Long
  trendCatcherStatus = Long
longProfitTakeZones =
shortProfitTakeZones =
type =
  0 = llb
  1 = laso
  2 = default
  3 = stst
  4 = tcst
updatedAt =